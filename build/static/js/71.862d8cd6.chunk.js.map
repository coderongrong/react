{"version":3,"file":"static/js/71.862d8cd6.chunk.js","mappings":"0LAcA,MAXA,SAAcA,GACV,IAAMC,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAE3B,GAA0BC,EAAAA,EAAAA,UAAS,KAAI,eAAhCC,EAAK,KACZ,OADsB,MAElB,2BAAK,WAAUA,EAAO,YACXJ,IAGnB,ECRA,SAASK,EAAIN,EAAOO,GAChB,IAAMN,GAAUC,EAAAA,EAAAA,YAAWC,EAAAA,GAC3BK,QAAQC,IAAI,4BAA0BR,GAEtC,OAA0BG,EAAAA,EAAAA,UAAS,KAAI,eAAhCC,EAAK,KAAEK,EAAQ,MAEtBC,EAAAA,EAAAA,YAAU,WACNJ,EAAIK,QAAUP,CAClB,GAAG,CAACA,IAMJ,OACI,2BAAK,WAASA,GACV,SAAC,aAAqB,CAACQ,MAAO,eAAe,UACzC,SAAC,EAAK,OAEV,SAAC,EAAK,KACN,mBAAQC,QAVE,WACdJ,GAAS,SAAAK,GAAI,OAAIA,EAAO,GAAG,GAC/B,EAQmC,SAAC,eAGxC,CAEA,OAAeC,EAAAA,EAAAA,YAAWV,GCnB1B,MAPA,SAAcN,GAEV,OAAsBI,EAAAA,EAAAA,UAAS,IAAG,eAElC,MAAO,CAFG,KAAQ,KAGtB,ECmJA,MAxDA,WACI,OAA0BA,EAAAA,EAAAA,UAAS,GAAE,eAA9BC,EAAK,KAAEK,EAAQ,KACtB,GAAwBN,EAAAA,EAAAA,UAAS,GAAE,eAA5Ba,EAAI,KAAEC,EAAO,KAEdC,GAAWC,EAAAA,EAAAA,QAAO,MAClBC,GAASD,EAAAA,EAAAA,QAAO,MACtB,EAA8BE,IAAW,eAEnCC,GAFQ,KAAY,MAEJC,EAAAA,EAAAA,cAAY,WAC9Bd,EAASL,EAAQ,EACrB,GAAG,CAACA,KAEEoB,GAAWD,EAAAA,EAAAA,cAAY,WACzB,GACD,CAACnB,IAEEqB,GAAMC,EAAAA,EAAAA,UAAQ,WAChB,OAAOtB,EAAQ,CACnB,GAAG,CAACA,KAEJM,EAAAA,EAAAA,YAAU,WACNc,GAKJ,GAAG,IAEH,IAAMG,GAASJ,EAAAA,EAAAA,cAAY,WACvBN,EAAQD,EAAO,EACnB,GAAG,CAACA,IAEEY,GAAUL,EAAAA,EAAAA,cAAY,WACxBhB,QAAQC,IAAIQ,EAChB,GAAG,CAACA,IAKJ,OACI,SAAC,aAAqB,CAACJ,MAAO,UAAU,UACpC,4BACI,2BAAK,UAAQR,MACb,2BAAK,gBAAcqB,MACnB,iBAAKnB,IAAKc,EAAO,UAAC,SAAOJ,MACzB,mBAAQH,QAASS,EAAc,SAAC,qBAChC,mBAAQT,QAASW,EAAS,SAAC,eAC3B,mBAAQX,QAASc,EAAO,SAAC,gBACzB,mBAAQd,QAASe,EAAQ,SAAC,aAC1B,SAACC,EAAK,CAACvB,IAAKY,KACZ,mBAAQL,QAdE,WAClBN,QAAQC,IAAI,WAAYU,EAC5B,EAY2C,SAAC,iBAIhD,C","sources":["Inherit/components/child.js","Inherit/components/Count.js","Hook/Number.js","Inherit/index.js"],"sourcesContent":["import { forwardRef, useEffect, useState, useContext} from 'react'\r\nimport ThemeContext from '../../useContext';\r\n\r\nfunction App (props) {\r\n    const mycount = useContext(ThemeContext);\r\n\r\n    const [count, setCount] = useState(100)\r\n    return (\r\n        <div>child-- { count }\r\n        mycount: { mycount }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import { forwardRef, useEffect, useState, useContext } from 'react'\r\nimport ThemeContext from '../../useContext';\r\nimport Child from './child'\r\n\r\nfunction App(props, ref) {\r\n    const mycount = useContext(ThemeContext);\r\n    console.log('props mycount ------> ', mycount)\r\n\r\n    const [count, setCount] = useState(100)\r\n\r\n    useEffect(() => {\r\n        ref.current = count\r\n    }, [count])\r\n\r\n    const handleAdd = () => {\r\n        setCount(prev => prev + 100)\r\n    }\r\n\r\n    return (\r\n        <div>count-- {count}\r\n            <ThemeContext.Provider value={'xx zzzzzzzzz'}>\r\n                <Child />\r\n            </ThemeContext.Provider>\r\n            <Child />\r\n            <button onClick={handleAdd}>click me</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default forwardRef(App)","\r\nimport { useState } from 'react'\r\n\r\nfunction App (props) {\r\n\r\n    const [num, setNum] = useState(10)\r\n\r\n    return [num, setNum]\r\n}\r\n\r\nexport default App","// import Child from './children'\r\n// import Left from './left'\r\n// import Right from './right'\r\nimport { useState, useMemo, useRef, useCallback, useEffect, useContext } from 'react'\r\nimport Count from './components/Count'\r\nimport ThemeContext from '@/useContext'\r\nimport useNumber from '@/Hook/Number'\r\n\r\n// function App() {\r\n//     const a = 1;\r\n//     const b = 2;\r\n//     const [count, setCount] = useState(10)\r\n//     const [counts, setCounts] = useState(10)\r\n\r\n//     const handleClick = () => {\r\n//         // console.log('xxxxx')\r\n//         setCount(count + 1)\r\n//         setCounts(counts + 1)\r\n//     }\r\n\r\n//     const _count = useMemo(() => {\r\n//         console.log(' cout ')\r\n//         return count * 2\r\n//     }, [count])\r\n//     const count2 = () => {\r\n//         console.log(' cout2 ')\r\n//         return count * 2\r\n//     }\r\n\r\n//     return (\r\n//         <>\r\n//             <button onClick={handleClick}>click me</button>\r\n//             <h4>{ _count }---{ count2() }</h4>\r\n//             <Child right={<Left a={a} b={count} />} left={<Right b={b} />} />\r\n//         </>\r\n//     )\r\n// }\r\n\r\n// export default App\r\n\r\n// var ReactCurrentDispatcher = {\r\n//     /**\r\n//      * @internal\r\n//      * @type {ReactComponent}\r\n//      */\r\n//     current: null\r\n// };\r\n\r\n// console.log(ReactCurrentDispatcher.current)\r\n\r\n// function resolveDispatcher() {\r\n//     var dispatcher = ReactCurrentDispatcher.current;\r\n\r\n//     {\r\n//         if (dispatcher === null) {\r\n//             console.log('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\\n' + '2. You might be breaking the Rules of Hooks\\n' + '3. You might have more than one copy of React in the same app\\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');\r\n//         }\r\n//     } // Will result in a null access error if accessed outside render phase. We\r\n//     // intentionally don't throw our own error because this is in a hot path.\r\n//     // Also helps ensure this is inlined.\r\n\r\n//     console.log(dispatcher)\r\n//     return dispatcher;\r\n// }\r\n\r\n// function _useCallback(callback, deps) {\r\n//     var dispatcher = resolveDispatcher();\r\n//     console.log(dispatcher)\r\n//     return  //dispatcher._useCallback(callback, deps);\r\n// }\r\n\r\n// _useCallback()\r\n\r\n\r\nfunction App() {\r\n\r\n    const [count, setCount] = useState(60)\r\n    const timerId = useRef(null)\r\n\r\n    const handleStart = () => {\r\n        timerId.current = setInterval(() => {\r\n            setCount(pre => pre - 1)\r\n        }, 1000)\r\n    }\r\n\r\n    const handleStop = () => {\r\n        if (timerId) clearInterval(timerId.current)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>{count}</div>\r\n            <button onClick={handleStart}>start</button>\r\n            <button onClick={handleStop}>stop</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction TextInputWithFocusButton() {\r\n    const [count, setCount] = useState(0)\r\n    const [numb, setnumb] = useState(0)\r\n\r\n    const countRef = useRef(null)\r\n    const donDiv = useRef(null)\r\n    const [aNumber, setANumber] = useNumber()\r\n\r\n    const onButtonClick = useCallback(() => {\r\n        setCount(count + 1)\r\n    }, [count])\r\n\r\n    const getCount = useCallback(() => {\r\n        // console.log(count)\r\n    }, [count])\r\n\r\n    const res = useMemo(() => {\r\n        return count + 5\r\n    }, [count])\r\n\r\n    useEffect(() => {\r\n        getCount()\r\n        // console.log(countRef)\r\n        // console.log('donDiv', donDiv)\r\n        // console.log('themeCount', themeCount)\r\n        // console.log('aNumber', aNumber)\r\n    }, [])\r\n\r\n    const getnum = useCallback(() => {\r\n        setnumb(numb + 1)\r\n    }, [numb])\r\n\r\n    const _getnum = useCallback(() => {\r\n        console.log(numb)\r\n    }, [numb])\r\n\r\n    const handleChangde = () => {\r\n        console.log('countRef', countRef)\r\n    }\r\n    return (\r\n        <ThemeContext.Provider value={'xx prov'}>\r\n            <div>\r\n                <div>count: {count}</div>\r\n                <div>count - res: {res}</div>\r\n                <div ref={donDiv}>numb: {numb}</div>\r\n                <button onClick={onButtonClick}>Focus the input</button>\r\n                <button onClick={getCount}>get count</button>\r\n                <button onClick={getnum}>change num</button>\r\n                <button onClick={_getnum}>get num</button>\r\n                <Count ref={countRef} />\r\n                <button onClick={handleChangde}>click me</button>\r\n            </div>\r\n        </ThemeContext.Provider>\r\n    );\r\n}\r\n\r\nexport default TextInputWithFocusButton"],"names":["props","mycount","useContext","ThemeContext","useState","count","App","ref","console","log","setCount","useEffect","current","value","onClick","prev","forwardRef","numb","setnumb","countRef","useRef","donDiv","useNumber","onButtonClick","useCallback","getCount","res","useMemo","getnum","_getnum","Count"],"sourceRoot":""}